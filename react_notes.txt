<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Hello React</title>
    <script src="js/react.js"></script>
    <script src="js/react-dom.js"></script>
</head>
<body>
<div id="content"></div>
<script src="script.js"></script>
</body>
</html>

let h1 = React.createElement('h1', null, 'Hello world!')
<- если в третьем элементе передается строка, то она задает текстовое значение элемента, иначе дочерние элементы ('div', null, h1, h1)
class HelloWorld extends React.Component {
    render() {
        return React.createElement('h1', {id: this.props.id, title: this.props.title}, 'Hello ' + this.props.frameworkName + ' world!');
    }
}

ReactDOM.render(
    React.createElement(
        'div',
        {color: '#123456'},
        React.createElement(HelloWorld, {
            id: 'ember',
            frameworkName: 'Ember',
            title: 'A framework for creating ambitious web applications'
        }),
        React.createElement(HelloWorld, {
            id: 'backbone',
            frameworkName: 'Backbone',
            title: 'Backbone gives structure to web applications'
        }),
        React.createElement(HelloWorld, {
            id: 'angular',
            frameworkName: 'Angular',
            title: 'Superheroic JavaScript MVW Framework'
        })
    ),
    document.getElementById('content')
);


--------------------------

stateless компоненты можно реализовать через функцию.

--------------------------
События жизненного цикла компонентов React:

События подключения - просходят при присоединении элемента реакт (экземпляра компонента класса)
к узлу ДОМ.
События обновления - при обновлении элемента реакт в результате измнения
значений его свойтсв или состояния
События отключения - происходитя при отсоединении элемента от модели ДОМ.

constructor() - при создании
подключение:
componentWillMount() - перед подключением к ДОМ
componentDidMount() - после подключения и рендера (тут рекомендуется интеграция с другии библиотеками
и запросы XHR)

Обновление:
componentWillReceiveProps(nextProps) - перед получением свойтсв компонентом
shouldComponentUpdate(nextProps, nextState) -> bool - позволяет оптимизировать повторный
рендеринг компонента, помогая определить когда нужно или ненужно проводить обновление
componentWillUpdate(prevProps, prevState) - происходит непосредственно перед обновлением компонента
componentDidUpdate(prevProps, prevState) - сразу после обновления компонента

Отключение:
componentWillUnmount() - позволяет отключить любые слушатели событий или провести любые
завершаюшие действия перед отключением компонента

стр. 133

----------------

чистая функция
- для одинаковых входных данные один результат
- не имеет побочных эффектов (не меняет внешние состояния)
- не зависит от внешних состояний

----------------
конструктор выполняется до componentWillMount.
Реакт сначала рендерит а потом подключает элементы (т.е. рендер в этом контексте означает
вызов метода рендер классна, а не отображение ДОМ)

setState можно вызвать в этом методе и рендер получит новое состояние, т.е. повторный рендер
не потребуется

componentWillReceiveProps(newProps) {
    this.setState({
        opacity: (newProps.isVisible)?1:0
    })
}
вызывается каждый раз при повторном рендеринге

свойства (this.props) компонента НЕИЗМЕНЯЕМЫ, в отличие от состояний
состояния инициализируются в КОНСТРУКТОРЕ

Если совпадение среди стандартных имен атрибутов HTML не будет обнаружено (второй сценарий),
значит, имя свойства не является стандартным атрибутом.
 Оно не будет преобразовано в атрибут элемента.
 Однако значение при этом все равно остается доступным
  в объекте this.props (например, this.props.PROPERTY_NAME).

Во внутренней реализации React использует вызов Object.freeze()1 из ES5 для того, чтобы сделать объект this.props неизменяемым. Чтобы проверить, был ли объект объявлен неизменяемым, можно воспользоваться методом Object.isFrozen()2.

МНОГОТОЧИЕ - стр 89

настройка BABEL - стр 98
export PATH="./node_modules/.bin:$PATH"

спецсимволы - стр 102

className и htmlFor - 104

Состояние изменяется методом класса this.setState(data, callback). При вызове этого метода React объединяет данные с текущими состояниями и вызывает render(), после чего вызывает callback


СОБЫТИЯ:
подключение, обновление, отключение

метод componentDidMount() вызывается при вставке компонента в DOM. В этом методе рекомендуется размещать код для интеграции с другими фреймворками клиентской части и библиотеками, а также код отправки запросов XHR-серверу, потому что в этой точке жизненного цикла элемент компонента находится в реальной модели DOM, а вы получаете доступ ко всем его элементам, включая дочерние.

componentWillMount() — React знает, что этот элемент появится в реальной модели DOM.

Выполнение constructor() происходит до componentWillMount(). Кроме того, React сначала рендерит, а затем подключает элементы

вы можете вызвать setState() в componentWillMount(). render() получит новые значения, если они есть, и дополнительный повторный рендеринг не потребуется.

TODO: цикл событий REACT

Событие componentWillReceiveProps(newProps) инициируется при получении компонентом новых свойств. Эта стадия называется предстоящим переходом свойства. Данное событие позволяет вмешаться в работу компонента и включить новую логику между получением новых свойств и перед запуском render().
Затем идет событие shouldComponentUpdate(), которое инициируется непосредственно перед рендером. Рендерингу предшествует получение новых свойств или состояния. Событие shouldComponentUpdate() не инициируется для исходного рендеринга или для forceUpdate()

бинарный оператор + для преобразования логического значения isVisible в число:
shouldComponentUpdate(newProps, newState) {
return this.state.opacity !== + newProps.isVisible
}

Что касается componentWillUpdate(), этот метод вызывается непосредственно перед рендером, а ему предшествует получение новых свойств или состояния. Он не вызывается для исходного рендеринга. Используйте метод componentWillUpdate() для выполнения подготовительных действий перед обновлением и старайтесь не использовать this.setState() в этом методе!

события DOM стр 156

События, показанные выше, например onMouseOver, инициируются событием в фазе подъема (bubble up). Также существует фаза спуска (trickle down/capture), предшествующая фазам подъема и цели. Сначала идет фаза спуска, от окна до целевого элемента, затем идет фаза цели, и только потом идет фаза подъема, когда событие перемещается вверх по дереву обратно к окну, как показано на рис. 6.2.
Различия между фазами особенно важны, когда одно событие используется для элемента и его предка(-ов). В режиме подъема событие сначала перехватывается, затем обрабатывается внутренним элементом (целью), а затем распространяется во внешние элементы (предки, начиная с родителя цели). В режиме спуска событие сначала перехватывается внешним элементом, а затем распространяется на внутренние элементы.
Чтобы зарегистрировать слушателя события для фазы спуска, присоедините Capture к имени события

https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi

когда данные требуется сохранить в атрибутах элементов, а вы используете JSX, необходимо использовать префикс data-NAME
<li data-react-is-awesome={this.reactIsAwesome}>React is awesome!</li>

return <h1 {...this.properties}>
в ES6+ существуют похожие операторы деструктуризации (destructuring), расширения (spread) и остатка (rest).
